# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from camera_control_msgs/currentParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg

class currentParams(genpy.Message):
  _md5sum = "0bd1503e3cdf30ac14ba73c781326a32"
  _type = "camera_control_msgs/currentParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 offset_x # -20000 = Error	
uint32 offset_y # -20000 = Error
bool reverse_x
bool reverse_y

int32 black_level # -10000 = error/not available

int32 pgi_mode # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Off, 1 = On
int32 demosaicing_mode # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Simple, 1 = BaslerPGI
float32 noise_reduction # -20000.0 = Error, -10000.0 = Not available 
float32 sharpness_enhancement # -20000.0 = Error, -10000.0 = Not available 
int32 light_source_preset # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Off, 1 = Daylight5000K, 2 = Daylight6500K, 3 = Tungsten2800K
int32 balance_white_auto # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Off, 1 = Once, 2 = Continuous

int32 sensor_readout_mode # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Normal, 1 = Fast
int32 acquisition_frame_count # -20000 = Error, -10000 = Not available 
int32 trigger_selector # -3 = Unknown, -2 = Error, -1 = Not available, 0 = FrameStart, 1 = FrameBurstStart(USB)/AcquisitionStart(GigE)
int32 trigger_mode # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Off, 1 = On
int32 trigger_source # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Software, 1 = Line1, 2 = Line3, 3 = Line4, 4 = Action1(Selected Gige)
int32 trigger_activation # -3 = Unknown, -2 = Error, -1 = Not available, 0 = RisingEdge, 1 = FallingEdge
float32 trigger_delay # -20000.0 = Error, -10000.0 = Not available 

int32 user_set_selector # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Default, 1 = UserSet1, 2 = UserSet2, 3 = UserSet3, 4 = HighGain, 5 = AutoFunctions, 6 = ColorRaw
int32 user_set_default_selector # -3 = Unknown, -2 = Error, -1 = Not available, 0 = Default, 1 = UserSet1, 2 = UserSet2, 3 = UserSet3, 4 = HighGain, 5 = AutoFunctions, 6 = ColorRaw 

bool is_sleeping
float32 brightness
float32 exposure
float32 gain
float32 gamma 
uint32 binning_x
uint32 binning_y
sensor_msgs/RegionOfInterest roi

string[] available_image_encoding
string current_image_encoding
string current_image_ros_encoding

bool sucess
string message


================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify
"""
  __slots__ = ['offset_x','offset_y','reverse_x','reverse_y','black_level','pgi_mode','demosaicing_mode','noise_reduction','sharpness_enhancement','light_source_preset','balance_white_auto','sensor_readout_mode','acquisition_frame_count','trigger_selector','trigger_mode','trigger_source','trigger_activation','trigger_delay','user_set_selector','user_set_default_selector','is_sleeping','brightness','exposure','gain','gamma','binning_x','binning_y','roi','available_image_encoding','current_image_encoding','current_image_ros_encoding','sucess','message']
  _slot_types = ['uint32','uint32','bool','bool','int32','int32','int32','float32','float32','int32','int32','int32','int32','int32','int32','int32','int32','float32','int32','int32','bool','float32','float32','float32','float32','uint32','uint32','sensor_msgs/RegionOfInterest','string[]','string','string','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       offset_x,offset_y,reverse_x,reverse_y,black_level,pgi_mode,demosaicing_mode,noise_reduction,sharpness_enhancement,light_source_preset,balance_white_auto,sensor_readout_mode,acquisition_frame_count,trigger_selector,trigger_mode,trigger_source,trigger_activation,trigger_delay,user_set_selector,user_set_default_selector,is_sleeping,brightness,exposure,gain,gamma,binning_x,binning_y,roi,available_image_encoding,current_image_encoding,current_image_ros_encoding,sucess,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(currentParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.offset_x is None:
        self.offset_x = 0
      if self.offset_y is None:
        self.offset_y = 0
      if self.reverse_x is None:
        self.reverse_x = False
      if self.reverse_y is None:
        self.reverse_y = False
      if self.black_level is None:
        self.black_level = 0
      if self.pgi_mode is None:
        self.pgi_mode = 0
      if self.demosaicing_mode is None:
        self.demosaicing_mode = 0
      if self.noise_reduction is None:
        self.noise_reduction = 0.
      if self.sharpness_enhancement is None:
        self.sharpness_enhancement = 0.
      if self.light_source_preset is None:
        self.light_source_preset = 0
      if self.balance_white_auto is None:
        self.balance_white_auto = 0
      if self.sensor_readout_mode is None:
        self.sensor_readout_mode = 0
      if self.acquisition_frame_count is None:
        self.acquisition_frame_count = 0
      if self.trigger_selector is None:
        self.trigger_selector = 0
      if self.trigger_mode is None:
        self.trigger_mode = 0
      if self.trigger_source is None:
        self.trigger_source = 0
      if self.trigger_activation is None:
        self.trigger_activation = 0
      if self.trigger_delay is None:
        self.trigger_delay = 0.
      if self.user_set_selector is None:
        self.user_set_selector = 0
      if self.user_set_default_selector is None:
        self.user_set_default_selector = 0
      if self.is_sleeping is None:
        self.is_sleeping = False
      if self.brightness is None:
        self.brightness = 0.
      if self.exposure is None:
        self.exposure = 0.
      if self.gain is None:
        self.gain = 0.
      if self.gamma is None:
        self.gamma = 0.
      if self.binning_x is None:
        self.binning_x = 0
      if self.binning_y is None:
        self.binning_y = 0
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.available_image_encoding is None:
        self.available_image_encoding = []
      if self.current_image_encoding is None:
        self.current_image_encoding = ''
      if self.current_image_ros_encoding is None:
        self.current_image_ros_encoding = ''
      if self.sucess is None:
        self.sucess = False
      if self.message is None:
        self.message = ''
    else:
      self.offset_x = 0
      self.offset_y = 0
      self.reverse_x = False
      self.reverse_y = False
      self.black_level = 0
      self.pgi_mode = 0
      self.demosaicing_mode = 0
      self.noise_reduction = 0.
      self.sharpness_enhancement = 0.
      self.light_source_preset = 0
      self.balance_white_auto = 0
      self.sensor_readout_mode = 0
      self.acquisition_frame_count = 0
      self.trigger_selector = 0
      self.trigger_mode = 0
      self.trigger_source = 0
      self.trigger_activation = 0
      self.trigger_delay = 0.
      self.user_set_selector = 0
      self.user_set_default_selector = 0
      self.is_sleeping = False
      self.brightness = 0.
      self.exposure = 0.
      self.gain = 0.
      self.gamma = 0.
      self.binning_x = 0
      self.binning_y = 0
      self.roi = sensor_msgs.msg.RegionOfInterest()
      self.available_image_encoding = []
      self.current_image_encoding = ''
      self.current_image_ros_encoding = ''
      self.sucess = False
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2B3i2f8if2iB4f6IB().pack(_x.offset_x, _x.offset_y, _x.reverse_x, _x.reverse_y, _x.black_level, _x.pgi_mode, _x.demosaicing_mode, _x.noise_reduction, _x.sharpness_enhancement, _x.light_source_preset, _x.balance_white_auto, _x.sensor_readout_mode, _x.acquisition_frame_count, _x.trigger_selector, _x.trigger_mode, _x.trigger_source, _x.trigger_activation, _x.trigger_delay, _x.user_set_selector, _x.user_set_default_selector, _x.is_sleeping, _x.brightness, _x.exposure, _x.gain, _x.gamma, _x.binning_x, _x.binning_y, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify))
      length = len(self.available_image_encoding)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_image_encoding:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.current_image_encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.current_image_ros_encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sucess
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      end = 0
      _x = self
      start = end
      end += 116
      (_x.offset_x, _x.offset_y, _x.reverse_x, _x.reverse_y, _x.black_level, _x.pgi_mode, _x.demosaicing_mode, _x.noise_reduction, _x.sharpness_enhancement, _x.light_source_preset, _x.balance_white_auto, _x.sensor_readout_mode, _x.acquisition_frame_count, _x.trigger_selector, _x.trigger_mode, _x.trigger_source, _x.trigger_activation, _x.trigger_delay, _x.user_set_selector, _x.user_set_default_selector, _x.is_sleeping, _x.brightness, _x.exposure, _x.gain, _x.gamma, _x.binning_x, _x.binning_y, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify,) = _get_struct_2I2B3i2f8if2iB4f6IB().unpack(str[start:end])
      self.reverse_x = bool(self.reverse_x)
      self.reverse_y = bool(self.reverse_y)
      self.is_sleeping = bool(self.is_sleeping)
      self.roi.do_rectify = bool(self.roi.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_image_encoding = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_image_encoding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image_encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_image_encoding = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image_ros_encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_image_ros_encoding = str[start:end]
      start = end
      end += 1
      (self.sucess,) = _get_struct_B().unpack(str[start:end])
      self.sucess = bool(self.sucess)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2B3i2f8if2iB4f6IB().pack(_x.offset_x, _x.offset_y, _x.reverse_x, _x.reverse_y, _x.black_level, _x.pgi_mode, _x.demosaicing_mode, _x.noise_reduction, _x.sharpness_enhancement, _x.light_source_preset, _x.balance_white_auto, _x.sensor_readout_mode, _x.acquisition_frame_count, _x.trigger_selector, _x.trigger_mode, _x.trigger_source, _x.trigger_activation, _x.trigger_delay, _x.user_set_selector, _x.user_set_default_selector, _x.is_sleeping, _x.brightness, _x.exposure, _x.gain, _x.gamma, _x.binning_x, _x.binning_y, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify))
      length = len(self.available_image_encoding)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_image_encoding:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.current_image_encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.current_image_ros_encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sucess
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      end = 0
      _x = self
      start = end
      end += 116
      (_x.offset_x, _x.offset_y, _x.reverse_x, _x.reverse_y, _x.black_level, _x.pgi_mode, _x.demosaicing_mode, _x.noise_reduction, _x.sharpness_enhancement, _x.light_source_preset, _x.balance_white_auto, _x.sensor_readout_mode, _x.acquisition_frame_count, _x.trigger_selector, _x.trigger_mode, _x.trigger_source, _x.trigger_activation, _x.trigger_delay, _x.user_set_selector, _x.user_set_default_selector, _x.is_sleeping, _x.brightness, _x.exposure, _x.gain, _x.gamma, _x.binning_x, _x.binning_y, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify,) = _get_struct_2I2B3i2f8if2iB4f6IB().unpack(str[start:end])
      self.reverse_x = bool(self.reverse_x)
      self.reverse_y = bool(self.reverse_y)
      self.is_sleeping = bool(self.is_sleeping)
      self.roi.do_rectify = bool(self.roi.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_image_encoding = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_image_encoding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image_encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_image_encoding = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_image_ros_encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_image_ros_encoding = str[start:end]
      start = end
      end += 1
      (self.sucess,) = _get_struct_B().unpack(str[start:end])
      self.sucess = bool(self.sucess)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2B3i2f8if2iB4f6IB = None
def _get_struct_2I2B3i2f8if2iB4f6IB():
    global _struct_2I2B3i2f8if2iB4f6IB
    if _struct_2I2B3i2f8if2iB4f6IB is None:
        _struct_2I2B3i2f8if2iB4f6IB = struct.Struct("<2I2B3i2f8if2iB4f6IB")
    return _struct_2I2B3i2f8if2iB4f6IB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
